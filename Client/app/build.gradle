plugins {
    alias(libs.plugins.androidApplication)
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

android {
    namespace 'at.aau.anti_mon.client'
    compileSdk 34

    defaultConfig {
        applicationId "at.aau.anti_mon.client"
        minSdk 29
        targetSdk 34
        versionCode 2
        versionName "Come on Camembert 0.3"

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        dataBinding true
    }
    buildTypes {
        release {
            //signingConfig signingConfigs.release
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
            finalizedBy jacocoTestReport
        }
    }
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'

    reports {
        xml.required = true
        xml.destination file("${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml")
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/activities/**', '**/client/*.*', '**/adapters/**', '**/events/GlobalEventQueue.*', '**/viewmodels/SingleLiveEvent.*']
    def debugTree = fileTree(dir: "${project.layout.buildDirectory.get().asFile}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.from = files("${project.layout.buildDirectory.get().asFile}/jacoco/testDebugUnitTest.exec")
}

sonar {
  properties {
    property "sonar.projectKey", "dapopovic_SE2_Anti-Monopoly_Client"
    property "sonar.organization", "dapopovic"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.gradle.skipCompiler", "true"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    property "sonar.coverage.exclusions", "***/activities/**, **/client/*.*, **/adapters/**, **/events/GlobalEventQueue.*, **/viewmodels/SingleLiveEvent.*"
  }
}

// @see :  https://github.com/google/dagger
gradle.projectsEvaluated {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
        }
    }
}

dependencies {
    implementation libs.gson
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    implementation libs.runner

    implementation libs.retrofit
    implementation libs.converter.jackson
    implementation libs.jackson.databind
    implementation libs.jackson.core
    implementation libs.jackson.annotations

    implementation libs.multidex
    implementation libs.eventbus

    implementation libs.okio
    implementation libs.okhttp3.okhttp
    implementation libs.okhttpprofiler
    implementation libs.logging.interceptor

    // Add Dagger dependencies
    implementation libs.dagger
    annotationProcessor libs.dagger.compiler.v2511

    // Dagger Android
    implementation libs.dagger.android.v251
    implementation libs.dagger.android.support.v251 // if you use the support libraries
    annotationProcessor libs.dagger.android.processor.v251

    // DataBinding
    implementation libs.viewbinding
    implementation libs.databinding.common
    implementation libs.databinding.runtime
    implementation libs.databinding.adapters

    testImplementation libs.mockito.core
    testImplementation libs.mockwebserver
    testImplementation libs.core.testing
    testImplementation libs.junit
    testImplementation libs.junit.jupiter.api
    testImplementation(libs.junit.jupiter.params)
    testRuntimeOnly libs.junit.jupiter.engine

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}

